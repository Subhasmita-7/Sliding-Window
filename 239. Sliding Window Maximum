Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7


class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        int[] ans = new int[n-k+1];
        Deque<Integer> q = new ArrayDeque<>();
        int right = 0;

        for(int i = 0 ; i<n ; i++){
            if(!q.isEmpty() && q.peek() == i-k){
                q.poll();
            }

            while(!q.isEmpty() && nums[q.peekLast()] <= nums[i]){
                q.pollLast();
            }

            q.offer(i);
            if(i >= k-1){
                ans[right++] = nums[q.peek()];
            }
        }
        return ans;
    }
}
